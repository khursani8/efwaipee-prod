{"version":3,"sources":["api/thesis/thesis.controller.js"],"names":["index","show","showStudent","showThesis","create","upsert","patch","destroy","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","value","checkpoint","find","studentId","exec","then","res1","forEach","el","apply","_id","time","Date","err","reject","save","removeEntity","remove","end","handleEntityNotFound","handleError","send","req","catch","findById","params","id","name","body","findOneAndUpdate","new","setDefaultsOnInsert","runValidators"],"mappings":"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","file":"thesis.controller.js","sourcesContent":["/**\r\n * Using Rails-like standard naming convention for endpoints.\r\n * GET     /api/thesis              ->  index\r\n * POST    /api/thesis              ->  create\r\n * GET     /api/thesis/:id          ->  show\r\n * PUT     /api/thesis/:id          ->  upsert\r\n * PATCH   /api/thesis/:id          ->  patch\r\n * DELETE  /api/thesis/:id          ->  destroy\r\n */\r\n\r\n'use strict';\r\n\r\nimport jsonpatch from 'fast-json-patch';\r\nimport Thesis from './thesis.model';\r\nimport Log from '../log/log.model';\r\n\r\nfunction respondWithResult(res, statusCode) {\r\n  statusCode = statusCode || 200;\r\n  return function(entity) {\r\n    if(entity) {\r\n      return res.status(statusCode).json(entity);\r\n    }\r\n    return null;\r\n  };\r\n}\r\n\r\nfunction patchUpdates(patches) {\r\n  \r\n  return function(entity) {\r\n\r\n  patches.value = entity.checkpoint+1\r\n\r\n  if(patches.value==2){  //update all document to CGS SEND\r\n    Thesis.find({'studentId':entity.studentId}).exec()\r\n      .then((res1)=>{\r\n        res1.forEach(function(el) {\r\n          if(el.checkpoint<3){\r\n            try {\r\n            jsonpatch.apply(el, [patches], /*validate*/ true);\r\n            Log.create({'thesisId':el._id,'checkpoint':el.checkpoint,time:new Date(),'studentId':el.studentId})\r\n          } catch(err) {\r\n            return Promise.reject(err);\r\n          }\r\n          el.save();\r\n          }\r\n        }, this);\r\n      })\r\n  }\r\n\r\n    try {\r\n      jsonpatch.apply(entity, [patches], /*validate*/ true);\r\n      Log.create({'thesisId':entity._id,'checkpoint':entity.checkpoint,time:new Date(),'studentId':entity.studentId})\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return entity.save();\r\n  };\r\n}\r\n\r\nfunction removeEntity(res) {\r\n  return function(entity) {\r\n    if(entity) {\r\n      return entity.remove()\r\n        .then(() => {\r\n          res.status(204).end();\r\n        });\r\n    }\r\n  };\r\n}\r\n\r\nfunction handleEntityNotFound(res) {\r\n  return function(entity) {\r\n    if(!entity) {\r\n      res.status(404).end();\r\n      return null;\r\n    }\r\n    return entity;\r\n  };\r\n}\r\n\r\nfunction handleError(res, statusCode) {\r\n  statusCode = statusCode || 500;\r\n  return function(err) {\r\n    res.status(statusCode).send(err);\r\n  };\r\n}\r\n\r\n// Gets a list of Thesiss\r\nexport function index(req, res) {\r\n  return Thesis.find().exec()\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Gets a single Thesis from the DB\r\nexport function show(req, res) {\r\n  return Thesis.findById(req.params.id).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Gets a single Thesis based on student Idfrom the DB\r\nexport function showStudent(req, res) {\r\n  return Thesis.find({\"studentId\":req.params.id}).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\nexport function showThesis(req, res) {\r\n  // console.log(\"show Thesis\",req.params.name);\r\n  return Thesis.find({\"name\":{'$regex':req.params.name,'$options':'i'}}).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Creates a new Thesis in the DB\r\nexport function create(req, res) {\r\n  return Thesis.create(req.body)\r\n    .then((el)=>{\r\n      Log.create({'thesisId':el._id,'checkpoint':el.checkpoint,time:new Date(),'studentId':el.studentId})\r\n    })\r\n    .then(respondWithResult(res, 201))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Upserts the given Thesis in the DB at the specified ID\r\nexport function upsert(req, res) {\r\n  if(req.body._id) {\r\n    delete req.body._id;\r\n  }\r\n  return Thesis.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\r\n\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Updates an existing Thesis in the DB\r\nexport function patch(req, res) {\r\n  if(req.body._id) {\r\n    delete req.body._id;\r\n  }\r\n  \r\n  return Thesis.findById(req.params.id).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(patchUpdates(req.body))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Deletes a Thesis from the DB\r\nexport function destroy(req, res) {\r\n  return Thesis.findById(req.params.id).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(removeEntity(res))\r\n    .catch(handleError(res));\r\n}\r\n"]}