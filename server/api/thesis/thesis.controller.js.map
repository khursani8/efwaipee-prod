{"version":3,"sources":["api/thesis/thesis.controller.js"],"names":["index","show","showStudent","showThesis","create","upsert","patch","destroy","accessKeyId","process","env","aKId","secretAccessKey","secret","AWS","require","config","update","region","sns","SNS","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","value","checkpoint","find","studentId","exec","then","res1","forEach","el","apply","_id","time","Date","params","Message","PhoneNumber","examinerPhone","publish","err","data","console","log","stack","reject","save","removeEntity","remove","end","handleEntityNotFound","handleError","send","req","catch","findById","id","name","body","findOneAndUpdate","new","setDefaultsOnInsert","runValidators"],"mappings":"AAAA;;;;;;;;;;AAUA;;;;;;;;;;QAiGgBA,K,GAAAA,K;QAOAC,I,GAAAA,I;QAQAC,W,GAAAA,W;QAOAC,U,GAAAA,U;QASAC,M,GAAAA,M;QAUAC,M,GAAAA,M;QAWAC,K,GAAAA,K;QAaAC,O,GAAAA,O;;AAhKhB;;;;AACA;;;;AACA;;;;;;AAEA,IAAIC,cAAcC,QAAQC,GAAR,CAAYC,IAA9B;AACA,IAAIC,kBAAkBH,QAAQC,GAAR,CAAYG,MAAlC;;AAEA,IAAIC,MAAMC,QAAQ,SAAR,CAAV;AACAD,IAAIE,MAAJ,CAAWC,MAAX,CAAkB,EAACC,QAAO,WAAR,EAAoBV,wBAApB,EAAgCI,gCAAhC,EAAlB;AACA,IAAIO,MAAM,IAAIL,IAAIM,GAAR,EAAV;;AAEA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,UAAhC,EAA4C;AAC1CA,eAAaA,cAAc,GAA3B;AACA,SAAO,UAASC,MAAT,EAAiB;AACtB,QAAGA,MAAH,EAAW;AACT,aAAOF,IAAIG,MAAJ,CAAWF,UAAX,EAAuBG,IAAvB,CAA4BF,MAA5B,CAAP;AACD;AACD,WAAO,IAAP;AACD,GALD;AAMD;;AAED,SAASG,YAAT,CAAsBC,OAAtB,EAA+B;;AAE7B,SAAO,UAASJ,MAAT,EAAiB;AAAA;;AAExBI,YAAQC,KAAR,GAAgBL,OAAOM,UAAP,GAAkB,CAAlC;;AAEA,QAAGF,QAAQC,KAAR,IAAe,CAAlB,EAAoB;AAAG;AACrB,uBAAOE,IAAP,CAAY,EAAC,aAAYP,OAAOQ,SAApB,EAAZ,EAA4CC,IAA5C,GACGC,IADH,CACQ,UAACC,IAAD,EAAQ;AACZA,aAAKC,OAAL,CAAa,UAASC,EAAT,EAAa;AACxB,cAAGA,GAAGP,UAAH,GAAc,CAAjB,EAAmB;AAAG;AACpB,gBAAI;AACJ,sCAAUQ,KAAV,CAAgBD,EAAhB,EAAoB,CAACT,OAAD,CAApB,EAA+B,YAAa,IAA5C;AACA,4BAAIxB,MAAJ,CAAW,EAAC,YAAWiC,GAAGE,GAAf,EAAmB,cAAaF,GAAGP,UAAnC,EAA8CU,MAAK,IAAIC,IAAJ,EAAnD,EAA8D,aAAYJ,GAAGL,SAA7E,EAAX;AACA,kBAAIU,SAAS;AACXC,yBAAS,iKADE;AAEXC,6BAAaP,GAAGQ;AAFL,eAAb;AAIA1B,kBAAI2B,OAAJ,CAAYJ,MAAZ,EAAoB,UAASK,GAAT,EAAcC,IAAd,EAAoB;AACtC,oBAAID,GAAJ,EAASE,QAAQC,GAAR,CAAYH,GAAZ,EAAiBA,IAAII,KAArB,EAAT,CAAsC;AAAtC,qBACSF,QAAQC,GAAR,CAAYF,IAAZ,EAF6B,CAEA;AACvC,eAHD;AAID,aAXC,CAWA,OAAMD,GAAN,EAAW;AACX,qBAAO,kBAAQK,MAAR,CAAeL,GAAf,CAAP;AACD;AACDV,eAAGgB,IAAH;AACC;AACF,SAlBD;AAmBD,OArBH;AAsBD;;AAEC,QAAI;AACF,8BAAUf,KAAV,CAAgBd,MAAhB,EAAwB,CAACI,OAAD,CAAxB,EAAmC,YAAa,IAAhD;AACA,oBAAIxB,MAAJ,CAAW,EAAC,YAAWoB,OAAOe,GAAnB,EAAuB,cAAaf,OAAOM,UAA3C,EAAsDU,MAAK,IAAIC,IAAJ,EAA3D,EAAsE,aAAYjB,OAAOQ,SAAzF,EAAX;AACD,KAHD,CAGE,OAAMe,GAAN,EAAW;AACX,aAAO,kBAAQK,MAAR,CAAeL,GAAf,CAAP;AACD;AACD,WAAOvB,OAAO6B,IAAP,EAAP;AACD,GApCD;AAqCD;;AAED,SAASC,YAAT,CAAsBhC,GAAtB,EAA2B;AACzB,SAAO,UAASE,MAAT,EAAiB;AACtB,QAAGA,MAAH,EAAW;;AAET,aAAOA,OAAO+B,MAAP,GACJrB,IADI,CACC,YAAM;AACV,sBAAIH,IAAJ,CAAS;AACP,sBAAWP,OAAOe;AADX,SAAT,EAEGgB,MAFH,GAEYtB,IAFZ;AAGAX,YAAIG,MAAJ,CAAW,GAAX,EAAgB+B,GAAhB;AACD,OANI,CAAP;AAOD;AACF,GAXD;AAYD;;AAED,SAASC,oBAAT,CAA8BnC,GAA9B,EAAmC;AACjC,SAAO,UAASE,MAAT,EAAiB;AACtB,QAAG,CAACA,MAAJ,EAAY;AACVF,UAAIG,MAAJ,CAAW,GAAX,EAAgB+B,GAAhB;AACA,aAAO,IAAP;AACD;AACD,WAAOhC,MAAP;AACD,GAND;AAOD;;AAED,SAASkC,WAAT,CAAqBpC,GAArB,EAA0BC,UAA1B,EAAsC;AACpCA,eAAaA,cAAc,GAA3B;AACA,SAAO,UAASwB,GAAT,EAAc;AACnBzB,QAAIG,MAAJ,CAAWF,UAAX,EAAuBoC,IAAvB,CAA4BZ,GAA5B;AACD,GAFD;AAGD;;AAED;AACO,SAAS/C,KAAT,CAAe4D,GAAf,EAAoBtC,GAApB,EAAyB;AAC9B,SAAO,iBAAOS,IAAP,GAAcE,IAAd,GACJC,IADI,CACCb,kBAAkBC,GAAlB,CADD,EAEJuC,KAFI,CAEEH,YAAYpC,GAAZ,CAFF,CAAP;AAGD;;AAED;AACO,SAASrB,IAAT,CAAc2D,GAAd,EAAmBtC,GAAnB,EAAwB;AAC7B,SAAO,iBAAOwC,QAAP,CAAgBF,IAAIlB,MAAJ,CAAWqB,EAA3B,EAA+B9B,IAA/B,GACJC,IADI,CACCuB,qBAAqBnC,GAArB,CADD,EAEJY,IAFI,CAECb,kBAAkBC,GAAlB,CAFD,EAGJuC,KAHI,CAGEH,YAAYpC,GAAZ,CAHF,CAAP;AAID;;AAED;AACO,SAASpB,WAAT,CAAqB0D,GAArB,EAA0BtC,GAA1B,EAA+B;AACpC,SAAO,iBAAOS,IAAP,CAAY,EAAC,aAAY6B,IAAIlB,MAAJ,CAAWqB,EAAxB,EAAZ,EAAyC9B,IAAzC,GACJC,IADI,CACCuB,qBAAqBnC,GAArB,CADD,EAEJY,IAFI,CAECb,kBAAkBC,GAAlB,CAFD,EAGJuC,KAHI,CAGEH,YAAYpC,GAAZ,CAHF,CAAP;AAID;;AAEM,SAASnB,UAAT,CAAoByD,GAApB,EAAyBtC,GAAzB,EAA8B;AACnC;AACA,SAAO,iBAAOS,IAAP,CAAY,EAAC,QAAO,EAAC,UAAS6B,IAAIlB,MAAJ,CAAWsB,IAArB,EAA0B,YAAW,GAArC,EAAR,EAAZ,EAAgE/B,IAAhE,GACJC,IADI,CACCuB,qBAAqBnC,GAArB,CADD,EAEJY,IAFI,CAECb,kBAAkBC,GAAlB,CAFD,EAGJuC,KAHI,CAGEH,YAAYpC,GAAZ,CAHF,CAAP;AAID;;AAED;AACO,SAASlB,MAAT,CAAgBwD,GAAhB,EAAqBtC,GAArB,EAA0B;AAC/B,SAAO,iBAAOlB,MAAP,CAAcwD,IAAIK,IAAlB,EACJ/B,IADI,CACC,UAACG,EAAD,EAAM;AACV,kBAAIjC,MAAJ,CAAW,EAAC,YAAWiC,GAAGE,GAAf,EAAmB,cAAaF,GAAGP,UAAnC,EAA8CU,MAAK,IAAIC,IAAJ,EAAnD,EAA8D,aAAYJ,GAAGL,SAA7E,EAAX;AACD,GAHI,EAIJE,IAJI,CAICb,kBAAkBC,GAAlB,EAAuB,GAAvB,CAJD,EAKJuC,KALI,CAKEH,YAAYpC,GAAZ,CALF,CAAP;AAMD;;AAED;AACO,SAASjB,MAAT,CAAgBuD,GAAhB,EAAqBtC,GAArB,EAA0B;AAC/B,MAAGsC,IAAIK,IAAJ,CAAS1B,GAAZ,EAAiB;AACf,WAAOqB,IAAIK,IAAJ,CAAS1B,GAAhB;AACD;AACD,SAAO,iBAAO2B,gBAAP,CAAwB,EAAC3B,KAAKqB,IAAIlB,MAAJ,CAAWqB,EAAjB,EAAxB,EAA8CH,IAAIK,IAAlD,EAAwD,EAACE,KAAK,IAAN,EAAY9D,QAAQ,IAApB,EAA0B+D,qBAAqB,IAA/C,EAAqDC,eAAe,IAApE,EAAxD,EAAmIpC,IAAnI,GAEJC,IAFI,CAECb,kBAAkBC,GAAlB,CAFD,EAGJuC,KAHI,CAGEH,YAAYpC,GAAZ,CAHF,CAAP;AAID;;AAED;AACO,SAAShB,KAAT,CAAesD,GAAf,EAAoBtC,GAApB,EAAyB;AAC9B,MAAGsC,IAAIK,IAAJ,CAAS1B,GAAZ,EAAiB;AACf,WAAOqB,IAAIK,IAAJ,CAAS1B,GAAhB;AACD;;AAED,SAAO,iBAAOuB,QAAP,CAAgBF,IAAIlB,MAAJ,CAAWqB,EAA3B,EAA+B9B,IAA/B,GACJC,IADI,CACCuB,qBAAqBnC,GAArB,CADD,EAEJY,IAFI,CAECP,aAAaiC,IAAIK,IAAjB,CAFD,EAGJ/B,IAHI,CAGCb,kBAAkBC,GAAlB,CAHD,EAIJuC,KAJI,CAIEH,YAAYpC,GAAZ,CAJF,CAAP;AAKD;;AAED;AACO,SAASf,OAAT,CAAiBqD,GAAjB,EAAsBtC,GAAtB,EAA2B;AAChC,SAAO,iBAAOwC,QAAP,CAAgBF,IAAIlB,MAAJ,CAAWqB,EAA3B,EAA+B9B,IAA/B,GACJC,IADI,CACCuB,qBAAqBnC,GAArB,CADD,EAEJY,IAFI,CAECoB,aAAahC,GAAb,CAFD,EAGJuC,KAHI,CAGEH,YAAYpC,GAAZ,CAHF,CAAP;AAID","file":"thesis.controller.js","sourcesContent":["/**\r\n * Using Rails-like standard naming convention for endpoints.\r\n * GET     /api/thesis              ->  index\r\n * POST    /api/thesis              ->  create\r\n * GET     /api/thesis/:id          ->  show\r\n * PUT     /api/thesis/:id          ->  upsert\r\n * PATCH   /api/thesis/:id          ->  patch\r\n * DELETE  /api/thesis/:id          ->  destroy\r\n */\r\n\r\n'use strict';\r\n\r\nimport jsonpatch from 'fast-json-patch';\r\nimport Thesis from './thesis.model';\r\nimport Log from '../log/log.model';\r\n\r\nvar accessKeyId = process.env.aKId\r\nvar secretAccessKey = process.env.secret\r\n\r\nvar AWS = require('aws-sdk');\r\nAWS.config.update({region:'us-east-1',accessKeyId,secretAccessKey});\r\nvar sns = new AWS.SNS();\r\n\r\nfunction respondWithResult(res, statusCode) {\r\n  statusCode = statusCode || 200;\r\n  return function(entity) {\r\n    if(entity) {\r\n      return res.status(statusCode).json(entity);\r\n    }\r\n    return null;\r\n  };\r\n}\r\n\r\nfunction patchUpdates(patches) {\r\n  \r\n  return function(entity) {\r\n\r\n  patches.value = entity.checkpoint+1\r\n\r\n  if(patches.value==2){  //update all document to CGS SEND\r\n    Thesis.find({'studentId':entity.studentId}).exec()\r\n      .then((res1)=>{\r\n        res1.forEach(function(el) {\r\n          if(el.checkpoint<3){  //kalau ada yg baru tak kan effect yg lama punya document\r\n            try {\r\n            jsonpatch.apply(el, [patches], /*validate*/ true);\r\n            Log.create({'thesisId':el._id,'checkpoint':el.checkpoint,time:new Date(),'studentId':el.studentId})\r\n            var params = {\r\n              Message: 'Thesis from Universiti Teknologi Petronas have been sent to you.Please browse https://efwaipee.herokuapp.com/qrrecognizer and scan the QRcode inside the thesis',\r\n              PhoneNumber: el.examinerPhone,\r\n            };\r\n            sns.publish(params, function(err, data) {\r\n              if (err) console.log(err, err.stack); // an error occurred\r\n              else     console.log(data);           // successful response\r\n            });\r\n          } catch(err) {\r\n            return Promise.reject(err);\r\n          }\r\n          el.save();\r\n          }\r\n        }, this);\r\n      })\r\n  }\r\n\r\n    try {\r\n      jsonpatch.apply(entity, [patches], /*validate*/ true);\r\n      Log.create({'thesisId':entity._id,'checkpoint':entity.checkpoint,time:new Date(),'studentId':entity.studentId})\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return entity.save();\r\n  };\r\n}\r\n\r\nfunction removeEntity(res) {\r\n  return function(entity) {\r\n    if(entity) {\r\n\r\n      return entity.remove()\r\n        .then(() => {\r\n          Log.find({\r\n            'thesisId':entity._id\r\n          }).remove().exec();\r\n          res.status(204).end();\r\n        });\r\n    }\r\n  };\r\n}\r\n\r\nfunction handleEntityNotFound(res) {\r\n  return function(entity) {\r\n    if(!entity) {\r\n      res.status(404).end();\r\n      return null;\r\n    }\r\n    return entity;\r\n  };\r\n}\r\n\r\nfunction handleError(res, statusCode) {\r\n  statusCode = statusCode || 500;\r\n  return function(err) {\r\n    res.status(statusCode).send(err);\r\n  };\r\n}\r\n\r\n// Gets a list of Thesiss\r\nexport function index(req, res) {\r\n  return Thesis.find().exec()\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Gets a single Thesis from the DB\r\nexport function show(req, res) {\r\n  return Thesis.findById(req.params.id).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Gets a single Thesis based on student Idfrom the DB\r\nexport function showStudent(req, res) {\r\n  return Thesis.find({\"studentId\":req.params.id}).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\nexport function showThesis(req, res) {\r\n  // console.log(\"show Thesis\",req.params.name);\r\n  return Thesis.find({\"name\":{'$regex':req.params.name,'$options':'i'}}).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Creates a new Thesis in the DB\r\nexport function create(req, res) {\r\n  return Thesis.create(req.body)\r\n    .then((el)=>{\r\n      Log.create({'thesisId':el._id,'checkpoint':el.checkpoint,time:new Date(),'studentId':el.studentId})\r\n    })\r\n    .then(respondWithResult(res, 201))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Upserts the given Thesis in the DB at the specified ID\r\nexport function upsert(req, res) {\r\n  if(req.body._id) {\r\n    delete req.body._id;\r\n  }\r\n  return Thesis.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\r\n\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Updates an existing Thesis in the DB\r\nexport function patch(req, res) {\r\n  if(req.body._id) {\r\n    delete req.body._id;\r\n  }\r\n  \r\n  return Thesis.findById(req.params.id).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(patchUpdates(req.body))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Deletes a Thesis from the DB\r\nexport function destroy(req, res) {\r\n  return Thesis.findById(req.params.id).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(removeEntity(res))\r\n    .catch(handleError(res));\r\n}\r\n"]}