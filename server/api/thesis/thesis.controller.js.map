{"version":3,"sources":["api/thesis/thesis.controller.js"],"names":["index","show","showStudent","create","upsert","patch","destroy","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","value","checkpoint","apply","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","find","exec","catch","findById","params","id","body","_id","findOneAndUpdate","new","setDefaultsOnInsert","runValidators"],"mappings":"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","file":"thesis.controller.js","sourcesContent":["/**\r\n * Using Rails-like standard naming convention for endpoints.\r\n * GET     /api/thesis              ->  index\r\n * POST    /api/thesis              ->  create\r\n * GET     /api/thesis/:id          ->  show\r\n * PUT     /api/thesis/:id          ->  upsert\r\n * PATCH   /api/thesis/:id          ->  patch\r\n * DELETE  /api/thesis/:id          ->  destroy\r\n */\r\n\r\n'use strict';\r\n\r\nimport jsonpatch from 'fast-json-patch';\r\nimport Thesis from './thesis.model';\r\n\r\nfunction respondWithResult(res, statusCode) {\r\n  statusCode = statusCode || 200;\r\n  return function(entity) {\r\n    if(entity) {\r\n      return res.status(statusCode).json(entity);\r\n    }\r\n    return null;\r\n  };\r\n}\r\n\r\nfunction patchUpdates(patches) {\r\n  \r\n  return function(entity) {\r\n  patches.value = entity.checkpoint+1\r\n    try {\r\n      jsonpatch.apply(entity, [patches], /*validate*/ true);\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return entity.save();\r\n  };\r\n}\r\n\r\nfunction removeEntity(res) {\r\n  return function(entity) {\r\n    if(entity) {\r\n      return entity.remove()\r\n        .then(() => {\r\n          res.status(204).end();\r\n        });\r\n    }\r\n  };\r\n}\r\n\r\nfunction handleEntityNotFound(res) {\r\n  return function(entity) {\r\n    if(!entity) {\r\n      res.status(404).end();\r\n      return null;\r\n    }\r\n    return entity;\r\n  };\r\n}\r\n\r\nfunction handleError(res, statusCode) {\r\n  statusCode = statusCode || 500;\r\n  return function(err) {\r\n    res.status(statusCode).send(err);\r\n  };\r\n}\r\n\r\n// Gets a list of Thesiss\r\nexport function index(req, res) {\r\n  return Thesis.find().exec()\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Gets a single Thesis from the DB\r\nexport function show(req, res) {\r\n  return Thesis.findById(req.params.id).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Gets a single Thesis based on student Idfrom the DB\r\nexport function showStudent(req, res) {\r\n  return Thesis.find({\"studentId\":req.params.id}).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Creates a new Thesis in the DB\r\nexport function create(req, res) {\r\n  return Thesis.create(req.body)\r\n    .then(respondWithResult(res, 201))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Upserts the given Thesis in the DB at the specified ID\r\nexport function upsert(req, res) {\r\n  if(req.body._id) {\r\n    delete req.body._id;\r\n  }\r\n  return Thesis.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\r\n\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Updates an existing Thesis in the DB\r\nexport function patch(req, res) {\r\n  if(req.body._id) {\r\n    delete req.body._id;\r\n  }\r\n  \r\n  return Thesis.findById(req.params.id).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(patchUpdates(req.body))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Deletes a Thesis from the DB\r\nexport function destroy(req, res) {\r\n  return Thesis.findById(req.params.id).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(removeEntity(res))\r\n    .catch(handleError(res));\r\n}\r\n"]}