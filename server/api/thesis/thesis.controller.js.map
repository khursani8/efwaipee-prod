{"version":3,"sources":["api/thesis/thesis.controller.js"],"names":["index","show","showStudent","showThesis","create","upsert","patch","destroy","accessKeyId","process","env","aKId","secretAccessKey","secret","smsMessage","AWS","require","config","update","region","sns","SNS","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","value","checkpoint","console","log","find","studentId","exec","then","res1","forEach","el","apply","_id","time","Date","params","Message","PhoneNumber","examinerPhone","publish","err","data","stack","reject","save","tarikh","op","path","removeEntity","remove","end","handleEntityNotFound","handleError","send","req","catch","findById","id","name","body","findOneAndUpdate","new","setDefaultsOnInsert","runValidators"],"mappings":"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","file":"thesis.controller.js","sourcesContent":["/**\r\n * Using Rails-like standard naming convention for endpoints.\r\n * GET     /api/thesis              ->  index\r\n * POST    /api/thesis              ->  create\r\n * GET     /api/thesis/:id          ->  show\r\n * PUT     /api/thesis/:id          ->  upsert\r\n * PATCH   /api/thesis/:id          ->  patch\r\n * DELETE  /api/thesis/:id          ->  destroy\r\n */\r\n\r\n'use strict';\r\n\r\nimport jsonpatch from 'fast-json-patch';\r\nimport Thesis from './thesis.model';\r\nimport Log from '../log/log.model';\r\n\r\nvar accessKeyId = process.env.aKId\r\nvar secretAccessKey = process.env.secret\r\nvar smsMessage = 'Thesis from Universiti Teknologi Petronas have been sent to you.Please browse https://cgs.sani.tech and scan the QRcode inside the thesis when received'\r\n\r\nvar AWS = require('aws-sdk');\r\nAWS.config.update({region:'us-east-1',accessKeyId,secretAccessKey});\r\nvar sns = new AWS.SNS();\r\n\r\nfunction respondWithResult(res, statusCode) {\r\n  statusCode = statusCode || 200;\r\n  return function(entity) {\r\n    if(entity) {\r\n      return res.status(statusCode).json(entity);\r\n    }\r\n    return null;\r\n  };\r\n}\r\n\r\nfunction patchUpdates(patches) {\r\n  \r\n  return function(entity) {\r\n\r\n  patches.value = entity.checkpoint+1\r\n  console.log('entity before',entity)\r\n\r\n  if(patches.value==2){  //update all document to CGS SEND\r\n    Thesis.find({'studentId':entity.studentId}).exec()\r\n      .then((res1)=>{\r\n        res1.forEach(function(el) {\r\n          if(el.checkpoint<3){  //kalau ada yg baru tak kan effect yg lama punya document\r\n            try {\r\n            jsonpatch.apply(el, [patches], /*validate*/ true);\r\n            Log.create({'thesisId':el._id,'checkpoint':el.checkpoint,time:new Date(),'studentId':el.studentId})\r\n            var params = {\r\n              Message: smsMessage,\r\n              PhoneNumber: el.examinerPhone,\r\n            };\r\n            if(secretAccessKey){\r\n              sns.publish(params, function(err, data) {\r\n              if (err) console.log(err, err.stack); // an error occurred\r\n              else     console.log(data);           // successful response\r\n            });\r\n            }\r\n            \r\n          } catch(err) {\r\n            return Promise.reject(err);\r\n          }\r\n          el.save();\r\n          }\r\n        }, this);\r\n      })\r\n  }\r\n\r\n    try {\r\n      var tarikh = new Date();\r\n      if(patches.value==3){\r\n        jsonpatch.apply(entity, [{op: 'replace', path: '/dateReceived', value: tarikh}]);\r\n      }\r\n      \r\n      jsonpatch.apply(entity, [patches], /*validate*/ true);\r\n      Log.create({'thesisId':entity._id,'checkpoint':entity.checkpoint,time:tarikh,'studentId':entity.studentId})\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return entity.save();\r\n  };\r\n}\r\n\r\nfunction removeEntity(res) {\r\n  return function(entity) {\r\n    if(entity) {\r\n\r\n      return entity.remove()\r\n        .then(() => {\r\n          Log.find({\r\n            'thesisId':entity._id\r\n          }).remove().exec();\r\n          res.status(204).end();\r\n        });\r\n    }\r\n  };\r\n}\r\n\r\nfunction handleEntityNotFound(res) {\r\n  return function(entity) {\r\n    if(!entity) {\r\n      res.status(404).end();\r\n      return null;\r\n    }\r\n    return entity;\r\n  };\r\n}\r\n\r\nfunction handleError(res, statusCode) {\r\n  statusCode = statusCode || 500;\r\n  return function(err) {\r\n    res.status(statusCode).send(err);\r\n  };\r\n}\r\n\r\n// Gets a list of Thesiss\r\nexport function index(req, res) {\r\n  return Thesis.find().exec()\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Gets a single Thesis from the DB\r\nexport function show(req, res) {\r\n  return Thesis.findById(req.params.id).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Gets a single Thesis based on student Idfrom the DB\r\nexport function showStudent(req, res) {\r\n  return Thesis.find({\"studentId\":req.params.id}).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\nexport function showThesis(req, res) {\r\n  // console.log(\"show Thesis\",req.params.name);\r\n  return Thesis.find({\"name\":{'$regex':req.params.name,'$options':'i'}}).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Creates a new Thesis in the DB\r\nexport function create(req, res) {\r\n  return Thesis.create(req.body)\r\n    .then((el)=>{\r\n      Log.create({'thesisId':el._id,'checkpoint':el.checkpoint,time:new Date(),'studentId':el.studentId})\r\n    })\r\n    .then(respondWithResult(res, 201))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Upserts the given Thesis in the DB at the specified ID\r\nexport function upsert(req, res) {\r\n  if(req.body._id) {\r\n    delete req.body._id;\r\n  }\r\n  return Thesis.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\r\n\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Updates an existing Thesis in the DB\r\nexport function patch(req, res) {\r\n  if(req.body._id) {\r\n    delete req.body._id;\r\n  }\r\n  \r\n  return Thesis.findById(req.params.id).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(patchUpdates(req.body))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Deletes a Thesis from the DB\r\nexport function destroy(req, res) {\r\n  return Thesis.findById(req.params.id).exec()\r\n    .then(handleEntityNotFound(res))\r\n    .then(removeEntity(res))\r\n    .catch(handleError(res));\r\n}\r\n"]}