{"version":3,"sources":["config/express.js"],"names":["app","env","get","use","static","join","root","compression","set","engine","require","renderFile","urlencoded","extended","json","initialize","secret","secrets","session","saveUninitialized","resave","store","MongoStore","mongooseConnection","connection","db","webpackDevMiddleware","stripAnsi","webpack","makeWebpackConfig","webpackConfig","DEV","compiler","browserSync","create","init","open","logFileChanges","proxy","port","ws","ghostMode","middleware","noInfo","stats","colors","timings","chunks","browserSyncPort","plugins","plugin","console","log","hasErrors","hasWarnings","sockets","emit","title","body","toString","timeout","reload"],"mappings":"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","file":"express.js","sourcesContent":["/**\r\n * Express configuration\r\n */\r\n\r\n'use strict';\r\n\r\nimport express from 'express';\r\nimport favicon from 'serve-favicon';\r\nimport morgan from 'morgan';\r\nimport shrinkRay from 'shrink-ray';\r\nimport bodyParser from 'body-parser';\r\nimport methodOverride from 'method-override';\r\nimport cookieParser from 'cookie-parser';\r\nimport errorHandler from 'errorhandler';\r\nimport path from 'path';\r\nimport lusca from 'lusca';\r\nimport config from './environment';\r\nimport passport from 'passport';\r\nimport session from 'express-session';\r\nimport connectMongo from 'connect-mongo';\r\nimport mongoose from 'mongoose';\r\nvar MongoStore = connectMongo(session);\r\nvar compression = require('compression')\r\n\r\nexport default function(app) {\r\n  var env = app.get('env');\r\n\r\n  if(env === 'development' || env === 'test') {\r\n    app.use(express.static(path.join(config.root, '.tmp')));\r\n  }\r\n\r\n  if(env === 'production') {\r\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\r\n  }\r\n  app.use(compression())\r\n\r\n\r\n  app.set('appPath', path.join(config.root, 'client'));\r\n  app.use(express.static(app.get('appPath')));\r\n  app.use(morgan('dev'));\r\n\r\n  app.set('views', `${config.root}/server/views`);\r\n  app.engine('html', require('ejs').renderFile);\r\n  app.set('view engine', 'html');\r\n  app.use(shrinkRay());\r\n  app.use(bodyParser.urlencoded({ extended: false }));\r\n  app.use(bodyParser.json());\r\n  app.use(methodOverride());\r\n  app.use(cookieParser());\r\n  app.use(passport.initialize());\r\n\r\n\r\n  // Persist sessions with MongoStore / sequelizeStore\r\n  // We need to enable sessions for passport-twitter because it's an\r\n  // oauth 1.0 strategy, and Lusca depends on sessions\r\n  app.use(session({\r\n    secret: config.secrets.session,\r\n    saveUninitialized: true,\r\n    resave: false,\r\n    store: new MongoStore({\r\n      mongooseConnection: mongoose.connection,\r\n      db: 'efwaipee'\r\n    })\r\n  }));\r\n\r\n  /**\r\n   * Lusca - express server security\r\n   * https://github.com/krakenjs/lusca\r\n   */\r\n  // if(env !== 'test' && !process.env.SAUCE_USERNAME) {\r\n  //   app.use(lusca({\r\n  //     csrf: {\r\n  //       angular: true\r\n  //     },\r\n  //     xframe: 'SAMEORIGIN',\r\n  //     hsts: {\r\n  //       maxAge: 31536000, //1 year, in seconds\r\n  //       includeSubDomains: true,\r\n  //       preload: true\r\n  //     },\r\n  //     xssProtection: true\r\n  //   }));\r\n  // }\r\n\r\n  if(env === 'development') {\r\n    const webpackDevMiddleware = require('webpack-dev-middleware');\r\n    const stripAnsi = require('strip-ansi');\r\n    const webpack = require('webpack');\r\n    const makeWebpackConfig = require('../../webpack.make');\r\n    const webpackConfig = makeWebpackConfig({ DEV: true });\r\n    const compiler = webpack(webpackConfig);\r\n    const browserSync = require('browser-sync').create();\r\n\r\n    /**\r\n     * Run Browsersync and use middleware for Hot Module Replacement\r\n     */\r\n    browserSync.init({\r\n      open: false,\r\n      logFileChanges: false,\r\n      proxy: `localhost:${config.port}`,\r\n      ws: true,\r\n      ghostMode: false,\r\n      middleware: [\r\n        webpackDevMiddleware(compiler, {\r\n          noInfo: false,\r\n          stats: {\r\n            colors: true,\r\n            timings: true,\r\n            chunks: false\r\n          }\r\n        })\r\n      ],\r\n      port: config.browserSyncPort,\r\n      plugins: ['bs-fullscreen-message']\r\n    });\r\n\r\n    /**\r\n     * Reload all devices when bundle is complete\r\n     * or send a fullscreen error message to the browser instead\r\n     */\r\n    compiler.plugin('done', function(stats) {\r\n      console.log('webpack done hook');\r\n      if(stats.hasErrors() || stats.hasWarnings()) {\r\n        return browserSync.sockets.emit('fullscreen:message', {\r\n          title: 'Webpack Error:',\r\n          body: stripAnsi(stats.toString()),\r\n          timeout: 100000\r\n        });\r\n      }\r\n      browserSync.reload();\r\n    });\r\n  }\r\n\r\n  if(env === 'development' || env === 'test') {\r\n    app.use(errorHandler()); // Error handler - has to be last\r\n  }\r\n}\r\n"]}